<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:mvc="http://www.springframework.org/schema/mvc"   
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
       http://www.springframework.org/schema/task   
       http://www.springframework.org/schema/task/spring-task-4.0.xsd
	   http://www.springframework.org/schema/mvc   
	   http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd   
       ">

	<context:component-scan base-package="com.bjpowernode.common.service" />
	<context:component-scan base-package="com.bjpowernode.common.dao" />
	<context:component-scan base-package="com.bjpowernode.system.service" />
	<context:component-scan base-package="com.bjpowernode.system.dao" />
	<context:component-scan base-package="com.bjpowernode.buss.service" />


	<!-- proptery 配置 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:*-config.properties</value>
			</list>
		</property>
	</bean>
	
	
	

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass">
			<value>${connection.driver_class}</value>
		</property>
		<property name="jdbcUrl">
			<value>${connection.url}</value>
		</property>
		<property name="user">
			<value>${connection.username}</value>
		</property>
		<property name="password">
			<value>${connection.password}</value>
		</property>
		<!--连接池中保留的最小连接数。 -->
		<property name="minPoolSize">
			<value>${c3p0.minPoolSize}</value>
		</property>
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize">
			<value>${c3p0.maxPoolSize}</value>
		</property>
		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize">
			<value>${c3p0.initialPoolSize}</value>
		</property>
		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime">
			<value>${c3p0.maxIdleTime}</value>
		</property>
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement">
			<value>${c3p0.acquireIncrement}</value>
		</property>
		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
		<property name="maxStatements">
			<value>${c3p0.maxStatements}</value>
		</property>
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod">
			<value>${c3p0.idleConnectionTestPeriod}</value>
		</property>
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts">
			<value>${c3p0.acquireRetryAttempts}</value>
		</property>
		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
		<property name="breakAfterAcquireFailure">
			<value>${c3p0.breakAfterAcquireFailure}</value>
		</property>
		<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
			等方法来提升连接测试的性能。Default: false -->
		<property name="testConnectionOnCheckout">
			<value>${c3p0.testConnectionOnCheckout}</value>
		</property>
		
		<!-- 配置断开连接自动自重连 -->
		<property name="testConnectionOnCheckin">
			<value>${c3p0.testConnectionOnCheckin}</value>
		</property>
		
		<!-- 泄漏 监控 -->
		<property name="unreturnedConnectionTimeout">
			<value>${c3p0.unreturnedConnectionTimeout}</value>
		</property>

		<property name="debugUnreturnedConnectionStackTraces">
			<value>${c3p0.debugUnreturnedConnectionStackTraces}</value>
		</property>
		
		
	</bean>

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan">
			<list>
				<value>com.bjpowernode.common.entity.*</value>
				<value>com.bjpowernode.system.entity.*</value>
				<value>com.bjpowernode.buss.entity.*</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="javax.persistence.validation.mode">none</prop>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.query.substitutions">${hibernate.query.substitutions}</prop>
				<prop key="hibernate.default_batch_fetch_size">${hibernate.default_batch_fetch_size}</prop>
				<prop key="hibernate.max_fetch_depth">${hibernate.max_fetch_depth}</prop>
				<prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>
				<prop key="hibernate.bytecode.use_reflection_optimizer"></prop>
				<prop key="hibernate.enable_lazy_load_no_trans">${hibernate.enable_lazy_load_no_trans}</prop>
				<prop key="connection.provider_class">${connection.provider_class}</prop> 
				    <!-- 开启查询缓存 -->  
			    <prop key="hibernate.cache.use_query_cache">true</prop>  
			    <!-- 开启二级缓存 -->  
			    <prop key="hibernate.cache.use_second_level_cache">true</prop>  
			    <!-- 高速缓存提供程序 -->   
			    <!-- 由于spring也使用了Ehcache, 保证双方都使用同一个缓存管理器 -->  
			    <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory</prop>  
				<!-- 最小连接数 --> 
				<prop key="hibernate.c3p0.min_size">${hibernate.c3p0.min_size}</prop>
				<!-- 最大连接数 -->
				<prop key="hibernate.c3p0.max_size">${hibernate.c3p0.max_size}</prop>
				<!-- 获得连接的超时时间,如果超过这个时间,会抛出异常，单位毫秒 -->
				<prop key="hibernate.c3p0.timeout">${hibernate.c3p0.timeout}</prop>
				<!-- 每隔3000秒检查连接池里的空闲连接 ，单位是秒-->
				<prop key="hibernate.c3p0.idle_test_period">${hibernate.c3p0.idle_test_period}</prop>
				<!--查询的最大结果集 -->
				<prop key="hibernate.c3p0.max_statements">${hibernate.c3p0.max_statements}</prop>
				<!-- 每次都验证连接是否可用 -->
				<prop key="hibernate.c3p0.validate">${hibernate.c3p0.validate}</prop>
				<!-- 当连接池里面的连接用完的时候，C3P0一下获取的新的连接数 -->
				<prop key="hibernate.c3p0.acquire_increment">${hibernate.c3p0.acquire_increment}</prop>
			</props>
		</property>
	</bean>
	
	<!-- 配置事务容器 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 定义事务规则 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<!-- 定义事务入口 -->
	<aop:config>
		<aop:pointcut id="txPointcut" expression="execution(* com.bjpowernode..service..*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
	</aop:config>
	
	<!-- 开启AOP监听 只对当前配置文件有效 -->
	<aop:aspectj-autoproxy expose-proxy="true" />  

   
   
    
	
	<!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean> 
	
    <!-- cacheManager, 指定ehcache.xml的位置 -->   
	<bean id="cacheManagerEhcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">  
	    <property name="configLocation">  
	        <value>classpath:ehcache.xml</value>  
	    </property>  
	    <!-- 由于hibernate也使用了Ehcache, 保证双方都使用同一个缓存管理器 -->  
	    <property name="shared" value="true"/>  
	</bean>  

</beans>